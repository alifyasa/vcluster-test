name: "Upgrade Test for vCluster from template {{ vcluster.templateId.before }} to {{ vcluster.templateId.after }}"
defaults:
  parameters:
    platformHost: "{{ hostCluster.platformHost }}"
    clusterId: "{{ hostCluster.clusterId }}"
    vclusterId: "{{ vcluster.vclusterId }}"
    projectId: "{{ vcluster.projectId }}"
    loftAccessKey: "{{ hostCluster.loftAccessKey }}"
steps:
  - name: "Create vCluster"
    action: "vcluster/vcluster/create"
    parameters:
      templateId: "{{ vcluster.templateId.before }}"
    cleanupSteps:
      - name: "Delete vCluster"
        action: "vcluster/vcluster/delete"
  - name: "Wait vCluster to be Ready"
    action: "vcluster/vcluster/wait"
    parameters:
      waitUntilPhaseEquals: "Ready"
      timeoutString: "15m"
      pollingIntervalMs: 300
  - name: "Prepare Kubeconfig File"
    action: "shell/execute-script"
    parameters:
      script: |
        #!/bin/sh
        rm -f {{ vcluster.kubeconfigPath }}
        touch {{ vcluster.kubeconfigPath }}
  - name: "Save Kubeconfig"
    action: "vcluster/vcluster/save-kubeconfig"
    parameters:
      savePath: "{{ vcluster.kubeconfigPath }}"
  - name: "Install Helm Charts (Pre-Upgrade)"
    action: "shell/execute-script"
    parameters:
      script: |
        #!/bin/sh
        chmod 600 $KUBECONFIG
        echo $KUBECONFIG
        helm install {{ helmChart.name.before }} {{ helmChart.path }} -n $NAMESPACE --create-namespace
      env:
        KUBECONFIG: "{{ vcluster.kubeconfigPath }}"
        NAMESPACE: "{{ helmChart.name.before }}"
    cleanupSteps:
      - name: "Uninstall Helm Charts (Pre-Upgrade)"
        action: "shell/execute-script"
        parameters:
          script: |
            #!/bin/sh
            chmod 600 $KUBECONFIG
            echo $KUBECONFIG
            helm uninstall {{ helmChart.name.before }} -n $NAMESPACE
          env:
            KUBECONFIG: "{{ vcluster.kubeconfigPath }}"
            NAMESPACE: "{{ helmChart.name.before }}"
  - name: "Wait for the resources to be Ready (Pre-Upgrade)"
    action: "shell/execute-script"
    parameters:
      env:
        TIMEOUT: 30s
        NAMESPACE: "{{ helmChart.name.before }}"
        SLEEP_TIME_SECONDS: 300
        KUBECONFIG: "{{ vcluster.kubeconfigPath }}"
      script: |
        #!/bin/bash

        sleep $SLEEP_TIME_SECONDS

        kubectl wait --for=condition=Available deployment/deployment-type-1-x-basic-deploy -n $NAMESPACE --timeout=$TIMEOUT
        kubectl wait --for=condition=Available deployment/deployment-type-2-x-basic-deploy -n $NAMESPACE --timeout=$TIMEOUT

        kubectl wait --for=jsonpath='.subsets[*].addresses' endpoints/svc-type-1-x-basic-deploy -n $NAMESPACE --timeout=$TIMEOUT
        kubectl wait --for=jsonpath='.subsets[*].addresses' endpoints/svc-type-2-x-basic-deploy -n $NAMESPACE --timeout=$TIMEOUT
        kubectl wait --for=jsonpath='.subsets[*].addresses' endpoints/vm-service-x-kubevirt -n $NAMESPACE --timeout=$TIMEOUT

        kubectl wait --for=jsonpath='.status.loadBalancer.ingress[0].ip' ingress/ingress -n $NAMESPACE --timeout=$TIMEOUT

        kubectl wait --for=jsonpath='.status.phase'=Bound pvc/vm-dv-extra-pvc-x-kubevirt -n $NAMESPACE --timeout=$TIMEOUT
        kubectl wait --for=jsonpath='.status.phase'=Bound pvc/vm-dv-extra-x-kubevirt -n $NAMESPACE --timeout=$TIMEOUT
        kubectl wait --for=jsonpath='.status.phase'=Bound pvc/vm-dv-x-kubevirt -n $NAMESPACE --timeout=$TIMEOUT

        kubectl wait --for=condition=Ready dv/vm-dv-x-kubevirt -n $NAMESPACE --timeout=$TIMEOUT
        kubectl wait --for=condition=Ready dv/vm-dv-extra-x-kubevirt -n $NAMESPACE --timeout=$TIMEOUT

        kubectl wait --for=condition=Ready vm/vm-x-kubevirt -n $NAMESPACE --timeout=$TIMEOUT
        kubectl wait --for=condition=Ready vmi/vm-x-kubevirt -n $NAMESPACE --timeout=$TIMEOUT
  - name: "Upgrade to v21.0.0-beta.5"
    action: "vcluster/vcluster/change-template"
    parameters:
      targetTemplateId: "{{ vcluster.templateId.after }}"
  - name: "Wait vCluster Upgrade to Start"
    action: "vcluster/vcluster/wait"
    parameters:
      waitUntilPhaseEquals: "Pending"
      timeoutString: "15m"
      pollingIntervalMs: 300
  - name: "Wait vCluster Upgrade to Complete"
    action: "vcluster/vcluster/wait"
    parameters:
      waitUntilPhaseEquals: "Running"
      timeoutString: "15m"
      pollingIntervalMs: 300
  - name: "Install Helm Charts (Post-Upgrade)"
    action: "shell/execute-script"
    parameters:
      script: |
        #!/bin/sh
        chmod 600 $KUBECONFIG
        echo $KUBECONFIG
        helm install {{ helmChart.name.after }} {{ helmChart.path }} -n $NAMESPACE --create-namespace
      env:
        KUBECONFIG: "{{ vcluster.kubeconfigPath }}"
        NAMESPACE: "{{ helmChart.name.after }}"
    cleanupSteps:
      - name: "Uninstall Helm Charts (Post-Upgrade)"
        action: "shell/execute-script"
        parameters:
          script: |
            #!/bin/sh
            chmod 600 $KUBECONFIG
            echo $KUBECONFIG
            helm uninstall {{ helmChart.name.after }} -n $NAMESPACE
          env:
            KUBECONFIG: "{{ vcluster.kubeconfigPath }}"
            NAMESPACE: "{{ helmChart.name.after }}"
  - name: "Wait for the resources to be Ready (Post-Upgrade)"
    action: "shell/execute-script"
    parameters:
      env:
        TIMEOUT: 30s
        NAMESPACE: "{{ helmChart.name.after }}"
        SLEEP_TIME_SECONDS: 300
        KUBECONFIG: "{{ vcluster.kubeconfigPath }}"
      script: |
        #!/bin/bash

        sleep $SLEEP_TIME_SECONDS

        kubectl wait --for=condition=Available deployment/deployment-type-1-x-basic-deploy -n $NAMESPACE --timeout=$TIMEOUT
        kubectl wait --for=condition=Available deployment/deployment-type-2-x-basic-deploy -n $NAMESPACE --timeout=$TIMEOUT

        kubectl wait --for=jsonpath='.subsets[*].addresses' endpoints/svc-type-1-x-basic-deploy -n $NAMESPACE --timeout=$TIMEOUT
        kubectl wait --for=jsonpath='.subsets[*].addresses' endpoints/svc-type-2-x-basic-deploy -n $NAMESPACE --timeout=$TIMEOUT
        kubectl wait --for=jsonpath='.subsets[*].addresses' endpoints/vm-service-x-kubevirt -n $NAMESPACE --timeout=$TIMEOUT

        kubectl wait --for=jsonpath='.status.loadBalancer.ingress[0].ip' ingress/ingress -n $NAMESPACE --timeout=$TIMEOUT

        kubectl wait --for=jsonpath='.status.phase'=Bound pvc/vm-dv-extra-pvc-x-kubevirt -n $NAMESPACE --timeout=$TIMEOUT
        kubectl wait --for=jsonpath='.status.phase'=Bound pvc/vm-dv-extra-x-kubevirt -n $NAMESPACE --timeout=$TIMEOUT
        kubectl wait --for=jsonpath='.status.phase'=Bound pvc/vm-dv-x-kubevirt -n $NAMESPACE --timeout=$TIMEOUT

        kubectl wait --for=condition=Ready dv/vm-dv-x-kubevirt -n $NAMESPACE --timeout=$TIMEOUT
        kubectl wait --for=condition=Ready dv/vm-dv-extra-x-kubevirt -n $NAMESPACE --timeout=$TIMEOUT

        kubectl wait --for=condition=Ready vm/vm-x-kubevirt -n $NAMESPACE --timeout=$TIMEOUT
        kubectl wait --for=condition=Ready vmi/vm-x-kubevirt -n $NAMESPACE --timeout=$TIMEOUT
